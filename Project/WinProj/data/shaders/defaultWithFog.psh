#version 330

struct Material
{
	sampler2D texture0;

	vec4  	  ambient;
	vec4  	  diffuse;
	vec4  	  specular;
	vec4  	  emission;
	float 	  shininess;
};

struct Light0
{
    vec4 	position;
    vec4 	ambient;
    vec4 	diffuse;
    vec4 	specular;
    vec3 	attenuation;
};

struct Fog
{
	vec4	fogColor;
	float 	fogStart;
	float 	fogEnd;
	float 	fogDensity;
	int 	fogEquation; // 0 = linear, 1 = exp, 2 = exp2
};

uniform Material 	material;
uniform Fog			fog;
uniform Light0 		light0;


struct Vertex 
{
    vec2  texCoord0;
    vec3  normal;
    vec3  lightDir;
    vec3  viewDir;
    float distance;
	vec4  viewPos;
};

in 	Vertex 	fragVertex;
out vec4 	FragColor;

float getFogFactor( Fog _params, float _fFogCoord )
{
	float fResult = 0.0;
	if(_params.fogEquation == 0)
	{
		fResult = (_params.fogEnd - _fFogCoord)/(_params.fogEnd - _params.fogStart);
	}
	else if( _params.fogEquation == 1 )
	{
		fResult = exp( -_params.fogDensity*_fFogCoord );
	}
	else if( _params.fogEquation == 2 )
	{
		fResult = exp( - pow(_params.fogDensity*_fFogCoord, 2.0) );
	}
		
	fResult = 1.0 - clamp(fResult, 0.0 , 1.0);
	
	return fResult;
}

void main()
{
	vec3 normal   = normalize(fragVertex.normal);
    vec3 lightDir = normalize(fragVertex.lightDir);
    vec3 viewDir  = normalize(fragVertex.viewDir);

	float attenuation = 1.0 / (light0.attenuation[0] +
                light0.attenuation[1] * fragVertex.distance +
				light0.attenuation[2] * fragVertex.distance * fragVertex.distance);
	
	FragColor = material.emission;
	FragColor += material.ambient * light0.ambient * attenuation;
	
	float NdotL = max(dot(normal, lightDir), 0.0);
    FragColor += material.diffuse * light0.diffuse * NdotL;
	
	float RdotVpow = max(pow(dot(reflect(-lightDir, normal), viewDir), material.shininess), 0.0);
    FragColor += material.specular * light0.specular * RdotVpow * attenuation;
	
	FragColor *= texture(material.texture0, fragVertex.texCoord0);
	
	// Add fog
	float fogCoord = abs(fragVertex.viewDir.y/ 1.0 );
	FragColor = mix(FragColor, fog.fogColor, getFogFactor(fog, fogCoord));
}

