#version 330

struct Material
{
	sampler2D texture0;

	vec4  	  ambient;
	vec4  	  diffuse;
	vec4  	  specular;
	vec4  	  emission;
	float 	  shininess;
};

struct Light0
{
    vec4 	position;
    vec4 	ambient;
    vec4 	diffuse;
    vec4 	specular;
    vec3 	attenuation;
};

struct Fog
{
	vec4	fogColor;
	float 	fogStart;
	float 	fogEnd;
	float 	fogDensity;
	int 	fogEquation; // 0 = linear, 1 = exp, 2 = exp2
};

uniform Material 	material;
uniform Fog			fog;
uniform Light0 		light0;


struct Vertex 
{
    vec2  texCoord0;
    vec3  normal;
    vec3  lightDir;
    vec3  viewDir;
    float distance;
	vec4  viewPos;
};

smooth in Vertex fragVertex;
out vec4 	FragColor;

float getFogFactor(Fog params, float fFogCoord);

void main()
{
	FragColor = texture(material.texture0, fragVertex.texCoord0);
	
	// Add fog
	float fogCoord = abs(fragVertex.viewPos.z/ fragVertex.viewPos.w );
	FragColor = mix(FragColor, fog.fogColor, getFogFactor(fog, fogCoord));
}

