#include "CCamera.h"

#include "CRender.h"

namespace glliba
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////

	CCamera::CCamera( CNode* _pParent)
		: CNode(_pParent)
		, m_up(Vector3(0.0f,1.0f,0.0f))
		, m_target(Vector3(0.0f))
		, m_bIsActive(false)
	{
		m_eTypeNode = TN_CAMERA;
		LOG_CONSOLE( "Initialize node " << type_node[m_eTypeNode].c_str());
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	CCamera::~CCamera()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////


	void CCamera::setTarget( const Vector3& _target )
	{
		m_target = _target;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	Vector3 CCamera::getTarget() const
	{
		return m_target;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CCamera::setUpVector( const Vector3& _up )
	{
		m_up = _up;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	Vector3 CCamera::getUpVector() const
	{
		return m_up;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool CCamera::isActive() const
	{
		return m_bIsActive;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CCamera::update( double _dDeltaTime )
	{
		if ( !m_bIsVisible )
		{
			return;
		}

		if (m_bIsActive)
		{
			RENDERER->udateCamera( m_position, m_target, m_up );
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CCamera::render()
	{
		if ( !m_bIsVisible )
		{
			return;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CCamera::init()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

}