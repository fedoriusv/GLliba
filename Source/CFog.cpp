#include "CFog.h"

#include "CRender.h"

namespace glliba
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////

	CFog::CFog()
		: CNode(NULL)
		, m_bActive(false)
		, m_bEnabled(true)
	{
		m_sFogData.m_color		= Vector4(1.0f);
		m_sFogData.m_fStart		= 5.0f;
		m_sFogData.m_fEnd		= 30.0f;
		m_sFogData.m_eMode		= FM_LINEAR;
		m_sFogData.m_fDensity	= 0.5f;

		m_eTypeNode = TN_FOG;
		LOG_CONSOLE( "initialize node " << type_node[m_eTypeNode].c_str());
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	CFog::~CFog()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::init()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::setColor(const Vector4& _color )
	{
		m_sFogData.m_color = _color;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	Vector4	CFog::getColor() const
	{
		return m_sFogData.m_color;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::setMode( FOG_MODE _eMode )
	{
		m_sFogData.m_eMode = _eMode;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	FOG_MODE CFog::getMode() const
	{
		return m_sFogData.m_eMode;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::setDensity( const float _fDensity )
	{
		m_sFogData.m_fDensity  =_fDensity;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	float CFog::getDensity() const
	{
		return m_sFogData.m_fDensity;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::setStart( const float _fStart )
	{
		m_sFogData.m_fStart = _fStart;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	float CFog::getStart() const
	{
		return m_sFogData.m_fStart;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::setEnd( const float _fEnd )
	{
		m_sFogData.m_fEnd = _fEnd;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	float CFog::getEnd() const
	{
		return m_sFogData.m_fEnd;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool CFog::isActive() const
	{
		return m_bActive;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::render()
	{
		if (!m_bActive)
		{
			return;
		}
		CRender::getInstance()->renderFog( m_bEnabled, m_sFogData );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::update( double _dDeltaTime )
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	void CFog::setEnabled( bool _bEnabled )
	{
		m_bEnabled = _bEnabled;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool CFog::getEnabled() const
	{
		return m_bEnabled;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////

} //glliba