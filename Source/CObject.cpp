#include "CObject.h"

namespace glliba
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	CObject::CObject()
		: m_name("")
		, m_ID(0)
		, m_eTypeObject(OT_UNKNOWN)
		, m_iRefCount(0)
	{
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	CObject::~CObject()
	{
		ASSERT( m_iRefCount > 0 || "Error references still exist" );
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	const std::string CObject::getName() const
	{
		return m_name;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	void CObject::setName( const std::string& _name )
	{
		m_name = _name;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	OBJECT_TYPE CObject::getObjectType() const
	{
		return m_eTypeObject;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	uint CObject::getRefCount() const
	{
		return m_iRefCount;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	uint CObject::getID() const
	{
		return m_ID;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	void CObject::setID( const uint _iId )
	{
		m_ID = _iId;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	uint CObject::releaseRef()
	{
		--m_iRefCount;
		return m_iRefCount;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	CObject* CObject::getRef()
	{
		++m_iRefCount;
		return this;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
}




