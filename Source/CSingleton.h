#ifndef _CSINGLETON_H_
#define _CSINGLETON_H_

#include "CLogger.h"

#ifndef NULL
#	define NULL    0
#endif

namespace glliba
{

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	class CSingleton
	{
	public:

		static T*		getInstance();
		static void		freeInstance();

		static bool		isInstantiated();

	protected:

		CSingleton();
		~CSingleton();

	private:

		static T*		s_pInstance;
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	T* CSingleton<T>::s_pInstance = NULL;

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	T* CSingleton<T>::getInstance()
	{
		if( s_pInstance == NULL )
		{
			s_pInstance = new T;
		}

		return s_pInstance;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	void CSingleton<T>::freeInstance()
	{
		delete s_pInstance;
		s_pInstance = NULL;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	bool CSingleton<T>::isInstantiated()
	{
		return s_pInstance != NULL;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	CSingleton<T>::CSingleton()
	{
		ASSERT(s_pInstance == NULL);
		s_pInstance = (T*)this;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////

	template <class T>
	CSingleton<T>::~CSingleton()
	{
		s_pInstance = NULL;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
}

#endif

